import { pool } from "../db.js";

export const fetchDataCatalogo = async (req, res) => {
  try {
    const [result] = await pool.query(
      "SELECT * FROM plataf81_palaciodb.catalogoctasegr"
    );
    res.json(result);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const getDataCatalogo = async (req, res) => {
  try {
    const [result] = await pool.query("SELECT * FROM catalogoctasegr WHERE id = ?", [
      req.params.id,
    ]);

    if (result.length === 0)
      return res.status(404).json({ message: "Data not found" });

    res.json(result[0]);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const createDataCatalogo = async (req, res) => {
  try {
    const {
      BENEFICIARIO,
      TIPO_DE_PERSONA,
      RFC,
      CURP,
      CATALOGO_VIALIDAD,
      TIPO_DE_VIALIDAD,
      NOMBRE_DE_VIALIDAD,
      NUMERO_INT_EXT_MZ_LT,
      ASENTAMIENTO,
      NOMBRE_DEL_ASENTAMIENTO,
      ENTIDAD_FEDERATIVA,
      MUNICIPIO_DELEGACION,
      CODIGO_POSTAL,
      BANCO,
      CTA_BANCO,
      CLABE_INTERBANCARIA,
      TIPO_DE_BENEFICIARIO,
      NUM_CONTRATO,
      SOLICITUD_DE_EMPLEO,
      PADRON_GOBIERNO_DEL_ESTADO,
      CV,
      ACREDITACIONES_CONSTANCIAS,
      CEDULA_PROFESIONAL,
      NUMERO_CEDULA_PROFESIONAL,
      TITULO_PROFESIONAL,
      INE,
      CURP2,
      ACTA_DE_NACIMIENTO,
      COMPROBANTE_DE_DOMICILIO,
      CONSTANCIA_DEL_SAT,
      NO_INHABILITADO,
      ANTECEDENTES_NO_PENALES,
      CERTIFICADO_MEDICO,
      CARTA_DE_RECOMENDACION,
      CARTA_DE_RECOMENDACION2,
      CARATULA_BANCARIO,
      FOTOGRAFIA_TAMAﾃ前_INFANTIL,
      LICENCIA_PARA_CONDUCIR,
      PADRON_GOBIERNO_DEL_ESTADO2,
      ACTA_CONSTITUTIVA,
      CONSTANCIA_DEL_SAT2,
      OPINION_POSITIVA,
      COMPROBANTE_DE_DOMICILIO2,
      SEMBLANZA_CURRICULAR_PM,
      CARATULA_BANCARIO2,
      CV_RL,
      INE_RL,
      CEDULA_PROFESIONAL_RL,
      NUMERO_CEDULA_PROFESIONAL_RL,
      CURP_RL,
      ACTA_DE_NACIMIENTO_RL,
      REVISADO
    } = req.body;

    const [result] = await pool.query(
      `INSERT INTO catalogoctasegr(BENEFICIARIO,TIPO_DE_PERSONA,RFC,CURP,CATALOGO_VIALIDAD,TIPO_DE_VIALIDAD,NOMBRE_DE_VIALIDAD,NUMERO_INT_EXT_MZ_LT,ASENTAMIENTO,NOMBRE_DEL_ASENTAMIENTO,ENTIDAD_FEDERATIVA,MUNICIPIO_DELEGACION,CODIGO_POSTAL,BANCO,CTA_BANCO,CLABE_INTERBANCARIA,TIPO_DE_BENEFICIARIO,NUM_CONTRATO,SOLICITUD_DE_EMPLEO,PADRON_GOBIERNO_DEL_ESTADO,CV,ACREDITACIONES_CONSTANCIAS,CEDULA_PROFESIONAL,NUMERO_CEDULA_PROFESIONAL,TITULO_PROFESIONAL,INE,CURP2,ACTA_DE_NACIMIENTO,COMPROBANTE_DE_DOMICILIO,CONSTANCIA_DEL_SAT,NO_INHABILITADO,ANTECEDENTES_NO_PENALES,CERTIFICADO_MEDICO,CARTA_DE_RECOMENDACION,CARTA_DE_RECOMENDACION2,CARATULA_BANCARIO,FOTOGRAFIA_TAMAﾃ前_INFANTIL,LICENCIA_PARA_CONDUCIR,PADRON_GOBIERNO_DEL_ESTADO2,ACTA_CONSTITUTIVA,CONSTANCIA_DEL_SAT2,OPINION_POSITIVA,COMPROBANTE_DE_DOMICILIO2,SEMBLANZA_CURRICULAR_PM,CARATULA_BANCARIO2,CV_RL,INE_RL,CEDULA_PROFESIONAL_RL,NUMERO_CEDULA_PROFESIONAL_RL,CURP_RL,ACTA_DE_NACIMIENTO_RL,REVISADO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
      [BENEFICIARIO, TIPO_DE_PERSONA, RFC, CURP, CATALOGO_VIALIDAD, TIPO_DE_VIALIDAD, NOMBRE_DE_VIALIDAD, NUMERO_INT_EXT_MZ_LT, ASENTAMIENTO, NOMBRE_DEL_ASENTAMIENTO, ENTIDAD_FEDERATIVA, MUNICIPIO_DELEGACION, CODIGO_POSTAL, BANCO, CTA_BANCO, CLABE_INTERBANCARIA, TIPO_DE_BENEFICIARIO, NUM_CONTRATO, SOLICITUD_DE_EMPLEO, PADRON_GOBIERNO_DEL_ESTADO, CV, ACREDITACIONES_CONSTANCIAS, CEDULA_PROFESIONAL, NUMERO_CEDULA_PROFESIONAL, TITULO_PROFESIONAL, INE, CURP2, ACTA_DE_NACIMIENTO, COMPROBANTE_DE_DOMICILIO, CONSTANCIA_DEL_SAT, NO_INHABILITADO, ANTECEDENTES_NO_PENALES, CERTIFICADO_MEDICO, CARTA_DE_RECOMENDACION, CARTA_DE_RECOMENDACION2, CARATULA_BANCARIO, FOTOGRAFIA_TAMAﾃ前_INFANTIL, LICENCIA_PARA_CONDUCIR, PADRON_GOBIERNO_DEL_ESTADO2, ACTA_CONSTITUTIVA, CONSTANCIA_DEL_SAT2, OPINION_POSITIVA, COMPROBANTE_DE_DOMICILIO2, SEMBLANZA_CURRICULAR_PM, CARATULA_BANCARIO2, CV_RL, INE_RL, CEDULA_PROFESIONAL_RL, NUMERO_CEDULA_PROFESIONAL_RL, CURP_RL, ACTA_DE_NACIMIENTO_RL, REVISADO]
    );
    res.json({
      id: result.insertId,
      BENEFICIARIO, TIPO_DE_PERSONA, RFC, CURP, CATALOGO_VIALIDAD, TIPO_DE_VIALIDAD, NOMBRE_DE_VIALIDAD, NUMERO_INT_EXT_MZ_LT, ASENTAMIENTO, NOMBRE_DEL_ASENTAMIENTO, ENTIDAD_FEDERATIVA, MUNICIPIO_DELEGACION, CODIGO_POSTAL, BANCO, CTA_BANCO, CLABE_INTERBANCARIA, TIPO_DE_BENEFICIARIO, NUM_CONTRATO, SOLICITUD_DE_EMPLEO, PADRON_GOBIERNO_DEL_ESTADO, CV, ACREDITACIONES_CONSTANCIAS, CEDULA_PROFESIONAL, NUMERO_CEDULA_PROFESIONAL, TITULO_PROFESIONAL, INE, CURP2, ACTA_DE_NACIMIENTO, COMPROBANTE_DE_DOMICILIO, CONSTANCIA_DEL_SAT, NO_INHABILITADO, ANTECEDENTES_NO_PENALES, CERTIFICADO_MEDICO, CARTA_DE_RECOMENDACION, CARTA_DE_RECOMENDACION2, CARATULA_BANCARIO, FOTOGRAFIA_TAMAﾃ前_INFANTIL, LICENCIA_PARA_CONDUCIR, PADRON_GOBIERNO_DEL_ESTADO2, ACTA_CONSTITUTIVA, CONSTANCIA_DEL_SAT2, OPINION_POSITIVA, COMPROBANTE_DE_DOMICILIO2, SEMBLANZA_CURRICULAR_PM, CARATULA_BANCARIO2, CV_RL, INE_RL, CEDULA_PROFESIONAL_RL, NUMERO_CEDULA_PROFESIONAL_RL, CURP_RL, ACTA_DE_NACIMIENTO_RL, REVISADO
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const updateDataCatalogo = async (req, res) => {
  try {
    const result = await pool.query("UPDATE catalogoctasegr SET ? WHERE id = ?", [
      req.body,
      req.params.id,
    ]);
    res.json(result);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const deleteDataCatalogo = async (req, res) => {
  try {
    const [result] = await pool.query("DELETE FROM catalogoctasegr WHERE id = ?", [
      req.params.id,
    ]);

    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Data not found" });

    return res.sendStatus(204);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};