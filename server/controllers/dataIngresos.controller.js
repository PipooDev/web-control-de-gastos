import { pool } from "../db.js";

export const fetchDataIngresos = async (req, res) => {
    try {
        const [result] = await pool.query(
            "SELECT * FROM plataf81_palaciodb.ingresodatos"
        );
        res.json(result);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};

export const getDataIngresos = async (req, res) => {
    try {
        const [result] = await pool.query("SELECT * FROM ingresodatos WHERE NumProg = ?", [
            req.params.NumProg,
        ]);

        if (result.length === 0)
            return res.status(404).json({ message: "Data not found" });

        res.json(result[0]);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};

export const createDataIngresos = async (req, res) => {
    try {
        const {
            OFICIO_SOLI_PAGO, DIA_SOLI_PAGO, MES_SOLI_PAGO, BENEFICIARIO, TIPO_DE_BENEFICIARIO, RFC, BANCO, CTA_BANCO, CLABE_INTERBANCARIA, IMPORTE, IMPORTE_PARA_COMBINAR, DESCRIP_IMPORTE, CONCEPTO_PAGO, ID_COMPONENTE, NOMBRE_COMPONENTE, CTA_CONTABLE_PROGRAMA, NOMBRE_PROGRAMA, FONDO_DE_INVERSION, RAMO, CTA_BANCO_PROGRAMA, CTA_CLABE_PROGRAMA, BANCO_AP, LUGAR_DE_COMISION, DIAS_DE_COMISION, DIAS_INICIO_COMISION, MES_INICIO_COMISION, DIA_FIN_COMISION, MES_FIN_COMISION, MOTIVO_DE_COMISION, MEDIO_DE_TRASPORTE, COMBUSTIBLES, PEAJES, PASAJES, VIATICOS_COMIDA, HOSPEDAJE, TOTAL_VIATICOS, ADSCRIPCION, NUM_CONTRATO, MES_DE_PAGO, PUESTO_DESEMPEÑO, TIPO_DE_ADJUDICACION, NUM_OFICIO_INVITACION, NUM_DE_ADJUDICACION, NUM_CONTRATO_ADJUDICACION, OBJETO_CONTRATO, MONTO_CONTRATO_IVA, PTDA_PTAL, NOMBRE_PTDA_PTAL, SUBCTA, NOMBRE_SUBCTA, CAPITULO, NOMBRE_CAPITULO, DOC_FISCAL_PAGO, FOLIO_FISCAL_NUM_FACTURA, DIA_FACTURA, MES_FACTURA, AÑO_FACTURA, SUBTOTAL_FACTURA, SUBTOTAL_COMBINAR_FACTURA, IVA_FACTURA, IVA_COMBINAR_FACTURA, RET_ISR_FACTURA, RET_ISR_COMBINAR_FACTURA, DOC_FISICOS_ANEXADOS, STATUS_TRANSFERENCIA, IMPORTE_TR, NUM_TR, FECHA_AP_TRANSFERENCIA, COMPROBADO, POR_COMPROBAR, REINTEGRADO, TOTAL_TR, STATUS_SOLI_PAGO, NUM_OFICIO_ENTREGA_COMPROBACION, REVISADO
        } = req.body;

        const [result] = await pool.query(
            `INSERT INTO ingresodatos(OFICIO_SOLI_PAGO,DIA_SOLI_PAGO,MES_SOLI_PAGO,BENEFICIARIO,TIPO_DE_BENEFICIARIO,RFC,BANCO,CTA_BANCO,CLABE_INTERBANCARIA,IMPORTE,IMPORTE_PARA_COMBINAR,DESCRIP_IMPORTE,CONCEPTO_PAGO,ID_COMPONENTE,NOMBRE_COMPONENTE,CTA_CONTABLE_PROGRAMA,NOMBRE_PROGRAMA,FONDO_DE_INVERSION,RAMO,CTA_BANCO_PROGRAMA,CTA_CLABE_PROGRAMA,BANCO_AP,LUGAR_DE_COMISION,DIAS_DE_COMISION,DIAS_INICIO_COMISION,MES_INICIO_COMISION,DIA_FIN_COMISION,MES_FIN_COMISION,MOTIVO_DE_COMISION,MEDIO_DE_TRASPORTE,COMBUSTIBLES,PEAJES,PASAJES,VIATICOS_COMIDA,HOSPEDAJE,TOTAL_VIATICOS,ADSCRIPCION,NUM_CONTRATO,MES_DE_PAGO,PUESTO_DESEMPEÑO,TIPO_DE_ADJUDICACION,NUM_OFICIO_INVITACION,NUM_DE_ADJUDICACION,NUM_CONTRATO_ADJUDICACION,OBJETO_CONTRATO,MONTO_CONTRATO_IVA,PTDA_PTAL,NOMBRE_PTDA_PTAL,SUBCTA,NOMBRE_SUBCTA,CAPITULO,NOMBRE_CAPITULO,DOC_FISCAL_PAGO,FOLIO_FISCAL_NUM_FACTURA,DIA_FACTURA,MES_FACTURA,AÑO_FACTURA,SUBTOTAL_FACTURA,SUBTOTAL_COMBINAR_FACTURA,IVA_FACTURA,IVA_COMBINAR_FACTURA,RET_ISR_FACTURA,RET_ISR_COMBINAR_FACTURA,DOC_FISICOS_ANEXADOS,STATUS_TRANSFERENCIA,IMPORTE_TR,NUM_TR,FECHA_AP_TRANSFERENCIA,COMPROBADO,POR_COMPROBAR,REINTEGRADO,TOTAL_TR,STATUS_SOLI_PAGO,NUM_OFICIO_ENTREGA_COMPROBACION,REVISADO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
            [OFICIO_SOLI_PAGO, DIA_SOLI_PAGO, MES_SOLI_PAGO, BENEFICIARIO, TIPO_DE_BENEFICIARIO, RFC, BANCO, CTA_BANCO, CLABE_INTERBANCARIA, IMPORTE, IMPORTE_PARA_COMBINAR, DESCRIP_IMPORTE, CONCEPTO_PAGO, ID_COMPONENTE, NOMBRE_COMPONENTE, CTA_CONTABLE_PROGRAMA, NOMBRE_PROGRAMA, FONDO_DE_INVERSION, RAMO, CTA_BANCO_PROGRAMA, CTA_CLABE_PROGRAMA, BANCO_AP, LUGAR_DE_COMISION, DIAS_DE_COMISION, DIAS_INICIO_COMISION, MES_INICIO_COMISION, DIA_FIN_COMISION, MES_FIN_COMISION, MOTIVO_DE_COMISION, MEDIO_DE_TRASPORTE, COMBUSTIBLES, PEAJES, PASAJES, VIATICOS_COMIDA, HOSPEDAJE, TOTAL_VIATICOS, ADSCRIPCION, NUM_CONTRATO, MES_DE_PAGO, PUESTO_DESEMPEÑO, TIPO_DE_ADJUDICACION, NUM_OFICIO_INVITACION, NUM_DE_ADJUDICACION, NUM_CONTRATO_ADJUDICACION, OBJETO_CONTRATO, MONTO_CONTRATO_IVA, PTDA_PTAL, NOMBRE_PTDA_PTAL, SUBCTA, NOMBRE_SUBCTA, CAPITULO, NOMBRE_CAPITULO, DOC_FISCAL_PAGO, FOLIO_FISCAL_NUM_FACTURA, DIA_FACTURA, MES_FACTURA, AÑO_FACTURA, SUBTOTAL_FACTURA, SUBTOTAL_COMBINAR_FACTURA, IVA_FACTURA, IVA_COMBINAR_FACTURA, RET_ISR_FACTURA, RET_ISR_COMBINAR_FACTURA, DOC_FISICOS_ANEXADOS, STATUS_TRANSFERENCIA, IMPORTE_TR, NUM_TR, FECHA_AP_TRANSFERENCIA, COMPROBADO, POR_COMPROBAR, REINTEGRADO, TOTAL_TR, STATUS_SOLI_PAGO, NUM_OFICIO_ENTREGA_COMPROBACION, REVISADO]
        );
        res.json({
            NumProg: result.insertId,
            OFICIO_SOLI_PAGO, DIA_SOLI_PAGO, MES_SOLI_PAGO, BENEFICIARIO, TIPO_DE_BENEFICIARIO, RFC, BANCO, CTA_BANCO, CLABE_INTERBANCARIA, IMPORTE, IMPORTE_PARA_COMBINAR, DESCRIP_IMPORTE, CONCEPTO_PAGO, ID_COMPONENTE, NOMBRE_COMPONENTE, CTA_CONTABLE_PROGRAMA, NOMBRE_PROGRAMA, FONDO_DE_INVERSION, RAMO, CTA_BANCO_PROGRAMA, CTA_CLABE_PROGRAMA, BANCO_AP, LUGAR_DE_COMISION, DIAS_DE_COMISION, DIAS_INICIO_COMISION, MES_INICIO_COMISION, DIA_FIN_COMISION, MES_FIN_COMISION, MOTIVO_DE_COMISION, MEDIO_DE_TRASPORTE, COMBUSTIBLES, PEAJES, PASAJES, VIATICOS_COMIDA, HOSPEDAJE, TOTAL_VIATICOS, ADSCRIPCION, NUM_CONTRATO, MES_DE_PAGO, PUESTO_DESEMPEÑO, TIPO_DE_ADJUDICACION, NUM_OFICIO_INVITACION, NUM_DE_ADJUDICACION, NUM_CONTRATO_ADJUDICACION, OBJETO_CONTRATO, MONTO_CONTRATO_IVA, PTDA_PTAL, NOMBRE_PTDA_PTAL, SUBCTA, NOMBRE_SUBCTA, CAPITULO, NOMBRE_CAPITULO, DOC_FISCAL_PAGO, FOLIO_FISCAL_NUM_FACTURA, DIA_FACTURA, MES_FACTURA, AÑO_FACTURA, SUBTOTAL_FACTURA, SUBTOTAL_COMBINAR_FACTURA, IVA_FACTURA, IVA_COMBINAR_FACTURA, RET_ISR_FACTURA, RET_ISR_COMBINAR_FACTURA, DOC_FISICOS_ANEXADOS, STATUS_TRANSFERENCIA, IMPORTE_TR, NUM_TR, FECHA_AP_TRANSFERENCIA, COMPROBADO, POR_COMPROBAR, REINTEGRADO, TOTAL_TR, STATUS_SOLI_PAGO, NUM_OFICIO_ENTREGA_COMPROBACION, REVISADO
        });
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};

export const updateDataIngresos = async (req, res) => {
    try {
        const result = await pool.query("UPDATE ingresodatos SET ? WHERE NumProg = ?", [
            req.body,
            req.params.NumProg,
        ]);
        res.json(result);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};

export const deleteDataIngresos = async (req, res) => {
    try {
        const [result] = await pool.query("DELETE FROM ingresodatos WHERE NumProg = ?", [
            req.params.NumProg,
        ]);

        if (result.affectedRows === 0)
            return res.status(404).json({ message: "Data not found" });

        return res.sendStatus(204);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};